const PBotGobAPI = Java.type("haven.purus.pbot.PBotGobAPI");
const PBotUtils = Java.type("haven.purus.pbot.PBotUtils");
const PBotWindowAPI = Java.type("haven.purus.pbot.PBotWindowAPI");
const PBotCharacterAPI = Java.type("haven.purus.pbot.PBotCharacterAPI");
const window = PBotUtils.PBotWindow("Luolamies", 80, 200, ScriptID);
// TODO jatkuva KO tarkistus ja hp tarkistus ja tp ja logout sitten yms...
// Ehkä TP heti jos boreqwqorm näkyy ei radius check

const MIN_ENERGY = 30; // In percentages
const MIN_SHP = 60; // In percentages

window.addButton("startBtn", "Start", 180, 10, 10);

const kritterWhitelist = ["gfx/kritter/bat/bat", "gfx/kritter/rat/rat", "gfx/kritter/cavelouse/cavelouse", "gfx/kritter/cavemoth/cavemoth", "gfx/kritter/horse/mare", "gfx/kritter/horse/stallion", "gfx/kritter/cavecentipede/cavecentipede"];

const herbs = ["gfx/terobjs/herbs/stalagoom", "gfx/terobjs/herbs/cavebulb", "gfx/terobjs/herbs/glimmermoss", "gfx/kritter/cavecentipede/cavecentipede"]

const waypoints = [{"x":-82.2529296875,"y":23.267578125},{"x":-83.080078125,"y":196.4638671875},{"x":-83.294921875,"y":308.021484375},{"x":-84.369140625,"y":443.7275390625},{"x":-111.16015625,"y":633.14453125},{"x":-70.5224609375,"y":768.1630859375},{"x":-145.578125,"y":904.083984375},{"x":-161.111328125,"y":1053.8193359375},{"x":-226.123046875,"y":1177.193359375},{"x":-246.0927734375,"y":1359.14453125},{"x":-300.6630859375,"y":1499.0400390625},{"x":-466.2646484375,"y":1520.255859375},{"x":-637.1298828125,"y":1537.3466796875},{"x":-849.36328125,"y":1512.80078125},{"x":-990.81640625,"y":1454.9541015625},{"x":-1112.890625,"y":1403.83203125},{"x":-1087.5712890625,"y":1215.71484375},{"x":-947.84765625,"y":946.451171875},{"x":-874.0380859375,"y":690.20703125},{"x":-834.6572265625,"y":510.6728515625},{"x":-820.724609375,"y":168.1259765625},{"x":-654.4677734375,"y":79.642578125},{"x":-426.615234375,"y":44.322265625}];
let origo = null;

let stop = false;

const shouldStop = () => {
	if(stop)
		return true;
	if(window.closed())
		return true;
	else
		return false;
};

const dangerous = () => {
	const gobs = PBotGobAPI.findGobsByNames(".*kritter.*");
	for(let gob of gobs) {
		if((!kritterWhitelist.includes(gob.getResname()) && PBotGobAPI.player().getRcCoords().dist(gob.getRcCoords()) < 40*11)) {
			PBotUtils.sysMsg("Detected a potentially dangerous kritter!" + gob.getResname());
			console.log("Detected a potentially dangerous kritter!" + gob.getResname());
			return true;
		}
	}
	return false;
};

const startBtn = () => {

	mainloop:
	while(true) {
	PBotUtils.sysMsg("Starting round");
	if(PBotCharacterAPI.getEnergy() < MIN_ENERGY || PBotCharacterAPI.getShp() < MIN_SHP) {
		PBotCharacterAPI.logoutChar();
		console.log("Detected low Energy/HP, aborting...!");
		window.closeWindow();
		return;
	}
	PBotCharacterAPI.doAct("travel", "hearth");
	PBotUtils.waitForHourglass();

		
	for(let cupboard of PBotGobAPI.findGobsByNames("gfx/terobjs/cupboard")) {
		if(shouldStop()) return;
		const invContent = PBotUtils.playerInventory().getInventoryContents();
		if(invContent.length === 0) {
			break;
		}
		cupboard.pfClick(3, 0);
		const wnd = PBotWindowAPI.waitForWindow("Cupboard");
		const cInv = PBotWindowAPI.getInventory(wnd);
		for(let itm of invContent) {
			if(shouldStop()) return;
			let iLoc = cInv.freeSpaceForItem(itm);
			if(iLoc == null)
				break;
			itm.takeItem();
			cInv.dropItemToInventory(iLoc);
			while(cInv.getItemFromInventoryAtLocation(iLoc.x, iLoc.y) == null) {
				PBotUtils.sleep(25);
			}
		}
	}
	const invContent = PBotUtils.playerInventory().getInventoryContents();
	if(invContent.length > 0) {
		PBotCharacterAPI.logoutChar();
		console.log("Couldn't empty the inventory! No cupboards? Aborting...");
		window.closeWindow();
		return;
	}
	const door = PBotGobAPI.findGobByNames(1000, "gfx/terobjs/arch/logcabin-door");
	door.doClick(3, 0);
	while(PBotGobAPI.findGobByNames(50, "gfx/terobjs/arch/logcabin") == null) {
		PBotUtils.sleep(25);
		if(shouldStop()) return;
	}
	const origin = PBotGobAPI.player().getRcCoords();
	waypointFor:
	for(let waypoint of waypoints) {
		if(shouldStop()) return;
		const tgt = origin.add(waypoint.x, waypoint.y).floor();
		PBotUtils.mapClick(tgt.x, tgt.y, 1, 0);
		let notMoving = 0;
		while(PBotGobAPI.player().getRcCoords().floor().dist(tgt) > 5 || PBotGobAPI.player().isMoving()) {
			if(shouldStop()) return;
			PBotUtils.sleep(25);
			if(!PBotGobAPI.player().isMoving()) {
				notMoving++;
			}
			if(notMoving == 1000/25*5) {
				// Probably stuck
				PBotUtils.sysMsg("Probably stuck, skip this waypoint!");
				continue waypointFor;
			}
			if(dangerous()) {
				PBotCharacterAPI.doAct("travel", "hearth");
				PBotUtils.waitForHourglass();
	PBotUtils.sleep(1000*60*20);
				continue mainloop;
			}
		}
		for(let herb of PBotGobAPI.findGobsByNames(herbs)) {
			herb.doClick(3, 0);
			let notMoving2 = 0;
			while(PBotGobAPI.findGobById(herb.getGobId()) != null || PBotGobAPI.player().isMoving()) {
				if(shouldStop()) return;
				PBotUtils.sleep(25);
				if(!PBotGobAPI.player().isMoving()) {
					notMoving2++;
				}
				if(notMoving2 == 1000/25*5) {
					// Probably stuck
					PBotUtils.sysMsg("Failed to pick up: " + herb.getResname(), 255, 0, 0);
					PBotUtils.sysMsg("Probably stuck, skip this herb!");
					break;
				}
				if(dangerous()) {
					PBotCharacterAPI.doAct("travel", "hearth");
					PBotUtils.waitForHourglass();
	PBotUtils.sleep(1000*60*20);
					continue mainloop;
				}
			}
			PBotUtils.sysMsg("Picked: " + herb.getResname(), 0, 255, 0);
		PBotUtils.mapClick(tgt.x, tgt.y, 1, 0);

			notMoving = 0;
			while(PBotGobAPI.player().getRcCoords().floor().dist(tgt) > 5 || PBotGobAPI.player().isMoving()) {
				if(shouldStop()) return;
				PBotUtils.sleep(25);
				if(!PBotGobAPI.player().isMoving()) {
					notMoving++;
				}
				if(notMoving == 1000/25*5) {
					// Probably stuck
					PBotUtils.sysMsg("Probably stuck, skip this waypoint!");
					continue waypointFor;
				}
				if(dangerous()) {
					PBotCharacterAPI.doAct("travel", "hearth");
					PBotUtils.waitForHourglass();
	PBotUtils.sleep(1000*60*20);
					continue mainloop;
				}
			}
		}
	}
	PBotCharacterAPI.doAct("travel", "hearth");
	PBotUtils.waitForHourglass();
	PBotUtils.sleep(1000*60*20);
	}
	PBotUtils.sysMsg("Finished foraging!");
	window.closeWindow();
};
